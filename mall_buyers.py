"""
Created on Thu Jan 12 18:13:26 2023

@author: Mark Faust (JHED: mfaust4)
"""

import random
import frac

class Node:
    
    def __init__(self, ID, connected_nodes = [], minimum_price = frac.Frac(0, 1), \
                 fractional_price = frac.Frac(0, 1)):
        """
        

        Parameters
        ----------
        ID : string
            ID to uniquely identify a node.
        connected_nodes : list
            list of Node IDs to which the Node has outgoing edges.
        minimum_price : Frac
            Lowest budget value of buyer allowed by each building.
        fractional_price : Frac
            Fraction of buyer's budget taken by each building.

        Returns
        -------
        None.

        """
        self.ID = ID
        self.connected_nodes = connected_nodes
        self.minimum_price = minimum_price
        self.fractional_price = fractional_price
        self.revenue = frac.Frac(0, 1)
        return
    
    def __str__(self):
        """
        

        Returns
        -------
        str
            String representation of the Node's information.

        """
        return f"{self.ID} - {self.connected_nodes} - {self.minimum_price} - {self.fractional_price}"

  
  
class Buyer:
    
    def __init__(self, current_node_id, remaining_budget):
        """
        

        Parameters
        ----------
        current_node_id : string
            Which node the buyer currently occupies.
        remaining_budget : Frac
            Amount of money the Buyer has left.

        Returns
        -------
        None.

        """
        self.current_node_id = current_node_id
        self.remaining_budget = remaining_budget
        return 
    
    def __str__(self):
        """
        

        Returns
        -------
        str
            String representation of the Buyer's information.

        """
        return f"Node: {self.current_node_id} --- Budget: {self.remaining_budget}"
    


def run_simulation(connectivities_file, pricing_file, budgets_file):
    """
    

    Parameters
    ----------
    connectivites_file : file
        File containing information regarding the connectivities between 
        system nodes.
    pricing_file : file
        File contatining information regarding the pricing schemes of 
        each node in the system.
    budget_file : file
        File containing information regarding the budgets of each Buyer 
        in the system.

    Returns
    -------
    total_revenue : Frac
        The total revenue generated by each Node in the system.
    node_dictionary : dict
        Dictionary containing each Node's contribution to the total revenue
        of the system.

    """
      
    
    # Open the file containing connectivities information
    connectivities = open(connectivities_file, 'r', encoding='utf-8-sig')
    connectivities_dict = {}
    
    # Iterate through each line in file
    for line in connectivities:
        
        # Indicate at which index in the split list the starting node and the 
        # ending node are
        START_NODE_INDEX = 0
        END_NODE_INDEX = 1
        
        # Create a list from each line containing the paths outlined in the file
        path = line.split()
        
        # Creating lists as the values for each key in the dictionary containing
        # the connectivity paths
        if path[START_NODE_INDEX] not in connectivities_dict:
            connectivities_dict[path[START_NODE_INDEX]] = []
        
        # Add each connection to the list of connections for each node
        connectivities_dict[path[START_NODE_INDEX]].append(path[END_NODE_INDEX])
     
    # Creating a list to carry all nodes in the system and starting to 
    # assign attributes to each object
    node_list = [Node(key, value) for key, value in connectivities_dict.items()]

    # Close the connectivities file
    connectivities.close()







    # Open the file containing node pricing information
    pricing = open(pricing_file, 'r', encoding='utf-8-sig')
    
    # Iterate through each line in file
    for line in pricing:
        
        # Create a list from each line in the file
        # containing the node pricing scheme
        pricing_info = line.split()
        
        # Assigning variable names the indices of the split list that contain the
        # corresponding information
        ID_INDEX = 0
        MIN_NUM_INDEX = 1
        MIN_DEN_INDEX = 2
        SCHEME_NUM_INDEX = 3
        SCHEME_DEN_INDEX = 4
        
    
        # Initializing a Frac object for the minimum budget for each node
        min_frac = frac.Frac(int(pricing_info[MIN_NUM_INDEX]), int(pricing_info[MIN_DEN_INDEX]))
        # Intitializing a Frac object for the pricing scheme for each node
        scheme_frac = frac.Frac(int(pricing_info[SCHEME_NUM_INDEX]), int(pricing_info[SCHEME_DEN_INDEX]))
        
        # Finding the corresponding node based on ID in pricing file
        for node in node_list:
            if node.ID.__eq__(pricing_info[ID_INDEX]):
                current_node = node
                break
            
        # Assigning the current node's minimum price and price scheme to the new
        # Frac objects
        current_node.minimum_price = min_frac
        current_node.fractional_price = scheme_frac

    # Close the pricing file
    pricing.close()






    
    # Open the file containing Buyers' budget information
    budgets = open(budgets_file, 'r', encoding='utf-8-sig')
    
    # Create a list containing each Buyer in the system
    buyer_list = []
    
    # Collecting number of nodes in system
    nodes = len(node_list)

    
    # Iterate through each line in file
    for line in budgets:
        
        # Create a list from each line in the file
        # containing each buyer's budget 
        budget_list = line.split()
        
        # Iterates through budgets in file
        for budget in budget_list:

            # Choosing random index to choose random node
            random_node = random.randrange(nodes)
            # Creating new Buyer with random starting node and budget from list 
            new_buyer = Buyer(node_list[random_node].ID, frac.Frac(int(budget), 1))
            # Adding buyer to list of buyers in the system
            buyer_list.append(new_buyer)
      
    # Close the budgets file
    budgets.close()
    






    # Iterate through each buyer in the buyer list to simulate their movement 
    # around the system
    for buyer in buyer_list:

        # Finding the corresponding node based on buyer's current node ID
        for node in node_list:
            if node.ID.__eq__(buyer.current_node_id):
                current_node = node
                break
        

        # Simulate buyers making purchases until each buyer is unable to meet the
        # minimum required budget for their current node
        while buyer.remaining_budget >= current_node.minimum_price:
            
            
            # Calculating money to be spent by buyer
            spent = buyer.remaining_budget * current_node.fractional_price
            # Spending the buyer's money and updating their budget
            buyer.remaining_budget = buyer.remaining_budget - spent
            
            # Adding revenue to node
            current_node.revenue = current_node.revenue + spent
            
            
            # Creating list of all connections to the buyer's current node
            possible_nodes = current_node.connected_nodes
            # Counting possibile connections
            num_poss_nodes = len(possible_nodes)
            # Choosing random index to choose random node
            random_node = random.randrange(num_poss_nodes)
            
            
            # Have the buyer move to a node that is connected to their current node
            buyer.current_node_id = possible_nodes[random_node]
            
            for node in node_list:
                if node.ID.__eq__(buyer.current_node_id):
                    current_node = node
                    break
            
    
    
    
    
    
    
    # Initialize total revenue fraction
    total_revenue = frac.Frac(0, 1)
    
    # Iterate through nodes in system
    for node in node_list:   
        
        # Calculate total revenue generated by all nodes
        total_revenue = total_revenue + node.revenue
    
    # Create a dictionary to hold each node's revenue contribution percentage
    node_dictionary = {}
    
    # Iterate through nodes in system
    for node in node_list:
        
        # Calculate each node's revenue contribution percentage
        node_dictionary[node.ID] = node.revenue / total_revenue

    # Returns the total revenue generated by all nodes in system and a dictionary
    # containing each node's contribution to the total revenue
    return total_revenue, node_dictionary
